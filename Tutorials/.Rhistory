explore<-subset(NDCData,indicator_name==indicators[i])
explore$count<-1
explore<-aggregate(list(count=explore$count),list(
global_category=explore$global_category,
indicator_name=explore$indicator_name,
value=explore$value
),sum)
explore<-explore[order(-explore$count),]
#what do we do from here? ideas?
#let's work first the null values to explore more
null.values<-c("No Document Submitted","No specified measure")
NDCData$value.numeric<-ifelse(NDCData$value==null.values[1],-1,1)
NDCData$value.numeric<-ifelse(NDCData$value==null.values[2],0,1)
#policy questions:
#which indicators receive the most global effort ?
explore<-aggregate(list(value.numeric=NDCData$value.numeric),list(
global_category=NDCData$global_category,
indicator_name=NDCData$indicator_name
),sum)
#with respect to mitigation
explore<-subset(explore,global_category=="Adaptation")   #Mitigation
explore<-explore[order(-explore$value.numeric),]
explore
#which countries are doing the most
explore<-aggregate(list(value.numeric=NDCData$value.numeric),list(
global_category=NDCData$global_category,
country=NDCData$country
),sum)
#with respect to mitigation
explore<-subset(explore,global_category=="Mitigation")   #Mitigation
explore<-explore[order(-explore$value.numeric),]
explore
out<-"C://Macintosh HD/Users/marianamonroy/Desktop/Git Hub"
for (i in 1:length(indicators))
{
explore<-subset(NDCData,indicator_name==indicators[i])
explore$count<-1
explore<-aggregate(list(count=explore$count),list(
global_category=explore$global_category,
indicator_name=explore$indicator_name,
value=explore$value
),sum)
explore<-explore[order(-explore$count),]
write.csv(pivot,paste0(out,indicators[i],".csv"),row.names=FALSE)
}
#create table fot nations codes
nations_names<-data.frame(iso_code3=unique(NDCdata.best$iso_code3),country=unique(NDCdata.best$country))
write.csv(nations_names,paste0(root,"nations_names_ndc.csv"),row.names=FALSE)
#read all files store in one single location
root<-"C://Macintosh HD/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw"
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
#now read all files and save them in a list
NDCData<-lapply(file.names,function(x){read.csv(paste0(root,x))})
NDCData<-do.call("rbind",NDCData)
#firt we need to work on understanding what is inside this data
#let's begin by looking at the different indicators
#remember we need to find a way to quantitively describe an NDC, that is a huge challenge, let's be creative
indicators<-unique(NDCData$indicator_name)
indicators
#there are 359 indicators, what is inside each one of them
#let's look at values in the first indicator
i<-3
explore<-subset(NDCData,indicator_name==indicators[i])
explore$count<-1
explore<-aggregate(list(count=explore$count),list(
global_category=explore$global_category,
indicator_name=explore$indicator_name,
value=explore$value
),sum)
explore<-explore[order(-explore$count),]
#what do we do from here? ideas?
#let's work first the null values to explore more
null.values<-c("No Document Submitted","No specified measure")
NDCData$value.numeric<-ifelse(NDCData$value==null.values[1],-1,1)
NDCData$value.numeric<-ifelse(NDCData$value==null.values[2],0,1)
#policy questions:
#which indicators receive the most global effort ?
explore<-aggregate(list(value.numeric=NDCData$value.numeric),list(
global_category=NDCData$global_category,
indicator_name=NDCData$indicator_name
),sum)
#with respect to mitigation
explore<-subset(explore,global_category=="Adaptation")   #Mitigation
explore<-explore[order(-explore$value.numeric),]
explore
#which countries are doing the most
explore<-aggregate(list(value.numeric=NDCData$value.numeric),list(
global_category=NDCData$global_category,
country=NDCData$country
),sum)
#with respect to mitigation
explore<-subset(explore,global_category=="Mitigation")   #Mitigation
explore<-explore[order(-explore$value.numeric),]
explore
out<-"C://Macintosh HD/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw"
for (i in 1:length(indicators))
{
explore<-subset(NDCData,indicator_name==indicators[i])
explore$count<-1
explore<-aggregate(list(count=explore$count),list(
global_category=explore$global_category,
indicator_name=explore$indicator_name,
value=explore$value
),sum)
explore<-explore[order(-explore$count),]
write.csv(pivot,paste0(out,indicators[i],".csv"),row.names=FALSE)
}
#create table fot nations codes
nations_names<-data.frame(iso_code3=unique(NDCdata.best$iso_code3),country=unique(NDCdata.best$country))
write.csv(nations_names,paste0(root,"nations_names_ndc.csv"),row.names=FALSE)
#read all files store in one single location
root<-"C://Macintosh HD/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw"
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
#now read all files and save them in a list
NDCData<-lapply(file.names,function(x){read.csv(paste0(root,x))})
NDCData<-do.call("rbind",NDCData)
#firt we need to work on understanding what is inside this data
#let's begin by looking at the different indicators
#remember we need to find a way to quantitively describe an NDC, that is a huge challenge, let's be creative
indicators<-unique(NDCData$indicator_name)
indicators
#there are 359 indicators, what is inside each one of them
#let's look at values in the first indicator
i<-3
explore<-subset(NDCData,indicator_name==indicators[i])
explore$count<-1
explore<-aggregate(list(count=explore$count),list(
global_category=explore$global_category,
indicator_name=explore$indicator_name,
value=explore$value
),sum)
explore<-explore[order(-explore$count),]
#what do we do from here? ideas?
#read all files store in one single location
root<-"C://Macintosh HD/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw"
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
#now read all files and save them in a list
NDCData<-lapply(file.names,function(x){read.csv(paste0(root,x))})
NDCData<-do.call("rbind",NDCData)
#firt we need to work on understanding what is inside this data
#let's begin by looking at the different indicators
#remember we need to find a way to quantitively describe an NDC, that is a huge challenge, let's be creative
indicators<-unique(NDCData$indicator_name)
indicators
i<-3
explore<-subset(NDCData,indicator_name==indicators[i])
explore$count<-1
explore<-aggregate(list(count=explore$count),list(
global_category=explore$global_category,
indicator_name=explore$indicator_name,
value=explore$value
),sum)
explore<-explore[order(-explore$count),]
#read all files store in one single location
root<-"C:/Macintosh HD/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw"
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
#read all files store in one single location
root<-"C:/Macintosh HD/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw"
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
getwd()
#read all files store in one single location
root<- "/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw"
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
#read all files store in one single location
root<- "/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw"
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
#now read all files and save them in a list
NDCData<-lapply(file.names,function(x){read.csv(paste0(root,x))})
NDCData<-do.call("rbind",NDCData)
#firt we need to work on understanding what is inside this data
#let's begin by looking at the different indicators
#remember we need to find a way to quantitively describe an NDC, that is a huge challenge, let's be creative
indicators<-unique(NDCData$indicator_name)
indicators
#there are 359 indicators, what is inside each one of them
#let's look at values in the first indicator
i<-3
explore<-subset(NDCData,indicator_name==indicators[i])
explore$count<-1
explore<-aggregate(list(count=explore$count),list(
global_category=explore$global_category,
indicator_name=explore$indicator_name,
value=explore$value
),sum)
explore<-explore[order(-explore$count),]
#what do we do from here? ideas?
#let's work first the null values to explore more
null.values<-c("No Document Submitted","No specified measure")
NDCData$value.numeric<-ifelse(NDCData$value==null.values[1],-1,1)
NDCData$value.numeric<-ifelse(NDCData$value==null.values[2],0,1)
#policy questions:
#which indicators receive the most global effort ?
explore<-aggregate(list(value.numeric=NDCData$value.numeric),list(
global_category=NDCData$global_category,
indicator_name=NDCData$indicator_name
),sum)
#with respect to mitigation
explore<-subset(explore,global_category=="Adaptation")   #Mitigation
explore<-explore[order(-explore$value.numeric),]
explore
#which countries are doing the most
explore<-aggregate(list(value.numeric=NDCData$value.numeric),list(
global_category=NDCData$global_category,
country=NDCData$country
),sum)
#with respect to mitigation
explore<-subset(explore,global_category=="Mitigation")   #Mitigation
explore<-explore[order(-explore$value.numeric),]
explore
#read all files store in one single location
root<- "/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw"
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
NDCData<-lapply(file.names,function(x){read.csv(paste0(root,x))})
#read all files store in one single location
root<- "/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw"
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
NDCData<-lapply(file.names,function(x){read.csv(paste0(root,x))})
paste0(root,file.names[1])
#read all files store in one single location
root<- "/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw/"
#first list all files and save these into a character vector
file.names<-list.files(path =root, pattern = ".csv")
#now read all files and save them in a list
NDCData<-lapply(file.names,function(x){read.csv(paste0(root,x))})
NDCData<-do.call("rbind",NDCData)
#firt we need to work on understanding what is inside this data
#let's begin by looking at the different indicators
#remember we need to find a way to quantitively describe an NDC, that is a huge challenge, let's be creative
indicators<-unique(NDCData$indicator_name)
indicators
#there are 359 indicators, what is inside each one of them
#let's look at values in the first indicator
i<-3
explore<-subset(NDCData,indicator_name==indicators[i])
explore$count<-1
explore<-aggregate(list(count=explore$count),list(
global_category=explore$global_category,
indicator_name=explore$indicator_name,
value=explore$value
),sum)
explore<-explore[order(-explore$count),]
#what do we do from here? ideas?
#let's work first the null values to explore more
null.values<-c("No Document Submitted","No specified measure")
NDCData$value.numeric<-ifelse(NDCData$value==null.values[1],-1,1)
NDCData$value.numeric<-ifelse(NDCData$value==null.values[2],0,1)
#policy questions:
#which indicators receive the most global effort ?
explore<-aggregate(list(value.numeric=NDCData$value.numeric),list(
global_category=NDCData$global_category,
indicator_name=NDCData$indicator_name
),sum)
#with respect to mitigation
explore<-subset(explore,global_category=="Adaptation")   #Mitigation
explore<-explore[order(-explore$value.numeric),]
explore
#which countries are doing the most
explore<-aggregate(list(value.numeric=NDCData$value.numeric),list(
global_category=NDCData$global_category,
country=NDCData$country
),sum)
#with respect to mitigation
explore<-subset(explore,global_category=="Mitigation")   #Mitigation
explore<-explore[order(-explore$value.numeric),]
explore
out<-"/Users/marianamonroy/Desktop/Git Hub/Climate-Change-and-AI/Data/NDC/Raw/"
for (i in 1:length(indicators))
{
explore<-subset(NDCData,indicator_name==indicators[i])
explore$count<-1
explore<-aggregate(list(count=explore$count),list(
global_category=explore$global_category,
indicator_name=explore$indicator_name,
value=explore$value
),sum)
explore<-explore[order(-explore$count),]
write.csv(pivot,paste0(out,indicators[i],".csv"),row.names=FALSE)
}
#create table fot nations codes
nations_names<-data.frame(iso_code3=unique(NDCdata.best$iso_code3),country=unique(NDCdata.best$country))
write.csv(nations_names,paste0(root,"nations_names_ndc.csv"),row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
set.seed(1)
summary(Default)
glm.fit<-glm(default~income+balance,data=Default,family=binomial)
summary(glm.fit)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial, subset=index)))
}
boot.fn(Auto,1:392)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial, subset=index)))
}
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial, subset=index)))
}
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial, subset=index)))
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial, subset=index)))
}
boot.fn(Auto,1:392)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial, subset=index)))
}
boot.fn(Default,1:392)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial, subset=index)))
}
boot.fn(Default,)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial, subset=index)))
}
boot.fn(Default)
#correr 100 veces boot con conjunto de datos
boot(default ,boot.fn ,1000)
#correr 100 veces boot con conjunto de datos
boot(Default ,boot.fn ,1000)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial, subset=index)))
}
boot.fn(Auto,1:392)
#correr 100 veces boot con conjunto de datos
boot(Auto ,boot.fn ,1000)
#correr 100 veces boot con conjunto de datos
boot(Auto ,boot.fn ,100)
boot(Auto ,boot.fn ,1000)
boot(Auto ,boot.fn ,1000)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
alpha.fn<-function (data ,index){
X=data$X [index]
Y=data$Y [index]
return ((var(Y)-cov (X,Y))/(var(X)+var(Y) -2* cov(X,Y)))
}
alpha.fn(Portfolio,1:100)
set.seed(1)
boot.fn<-function(data,index){
return(coef(lm(mpg~horsepower,data=data,subset=index)))
}
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index)))
}
boot.fn(default,1:392)
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index)))
}
boot.fn(Default,1:392)
Default
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index)))
}
boot.fn(default,1:392)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index)))
}
#correr 100 veces boot con conjunto de datos
set.seed(1)
boot(Default,boot.fn,100)
install.packages("bootstrap")
library(boot)
library(bootstrap)
#correr 100 veces boot con conjunto de datos
set.seed(1)
boot(Default,boot.fn,100)
boot(Auto ,boot.fn ,1000)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index)))
}
boot.fn(Default,.)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index)))
}
boot.fn(Default,)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index)))
}
summary(Default)Default
summary(Default)
dim(Default)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
n(data,index){
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boo.fn(data,index){
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn(data,index){
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn(data,index){
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index))
}
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index))
}
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index))))
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index)))
}
boot.fn(Auto,1:392)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,family=binomial,subset=index)))
}
boot.fn(Default,1:1000)
#correr 100 veces boot con conjunto de datos
set.seed(1)
boot(Default,boot.fn,100)
#Instrucciones Victor: función boot
#boot.fn este caso es reegresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial,subset=index)))
}
boot.fn(Default,1:1000)
dim(Default)
#Instrucciones Profesor Victor: Función boot
#boot.fn este caso es regresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial,subset=index)))
}
boot.fn(Default,1:10000)
#Instrucciones Profesor Victor: correr 100 veces boot con conjunto de datos.
set.seed(1)
boot(Default,boot.fn,100)
#Instrucciones Profesor Victor: Regresión normal summary regresion logistica family bionomial.
library(ISLR)
attach(Default)
set.seed(1)
summary(Default)
glm.fit<-glm(default~income+balance,data=Default,family=binomial)
summary(glm.fit)
#Instrucciones Profesor Victor: Regresión normal summary regresion logistica family bionomial.
library(ISLR)
summary(Default)
attach(Default)
set.seed(1)
glm.fit<-glm(default~income+balance,data=Default,family=binomial)
summary(glm.fit)
#Instrucciones Profesor Victor: Función boot
#boot.fn este caso es regresión logistica gml family binomial.
boot.fn<-function(data,index){
return(coef(glm(default~income+balance,data=Default,
family=binomial,subset=index)))
}
boot.fn(Default,1:10000)
#Instrucciones Profesor Victor: correr 100 veces boot con conjunto de datos.
set.seed(1)
boot(Default,boot.fn,100)
#Instrucciones Profesor Victor: Comparar resultados c con a.
#La diferencia de los parametros obtenidos entre gml() y bootstrap en los errores estandares es poco significativo. Sin embargo, bootstrap presenta una mejor opción para optimizar el intercepto, ingreso y balance del  modelo.
